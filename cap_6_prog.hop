! Capítulo 6: Funções recursivas

uses cap_5;

! >: fatorial2 4;
! >> 24 : num
fatorial2 : num -> num;
fatorial2 0       <= 1;
fatorial2 (n + 1) <= (n + 1) * fatorial2 n;

! >: fatorial3 4;
! >> 24 : num
fatorial3 : num -> num;
fatorial3 0 <= 1;
fatorial3 n <= n * fatorial3 (n - 1);

! >: 3 prod 2;
! >> 6 : num
infix prod : 6;
prod : num # num -> num;
m prod 0       <= 0;
m prod (n + 1) <= m + (m prod n);

! >: produto [7,5,2] ;
! >> 70 : num
produto : list num -> num;
produto []        <= 1;
produto (n :: ns) <= n * produto ns;

! >: tamanho[2,3,5] ;
! >> 3 : num
tamanho : list alpha -> num;
tamanho []        <= 0;
tamanho (_ :: xs) <= 1 + tamanho xs;

! >: inverte[2,5,3] ;
! >> [3, 5, 2] : list num
inverte : list alpha -> list alpha;
inverte []        <= [];
inverte (x :: xs) <= inverte xs <> [x];

! >: [1,3,5] || [2,4] ;
! >> [1, 3, 5, 2, 4] : list num
infix || : 5;
(||) : list alpha # list alpha -> list alpha;
[] || ys        <= ys;
(x :: xs) || ys <= x :: (xs || ys);

! >: inserir (5, [2,4,7,3,6,8,10]);
! >> [2,4,5,7,3,6,8,10] : list num
inserir : alpha # list alpha -> list alpha;
inserir (e, [])      <= [e];
inserir (e, x :: xs) <= if e =< x
                        then e :: (x :: xs)
                        else x :: inserir (e, xs);

! >: clasIns [2,4,3,6,3];
! >> [2,3,3,4,6] : list num
clasIns : list alpha -> list alpha;
clasIns []        <= [];
clasIns (x :: xs) <= inserir (x, clasIns xs);

! >: fibonacci 8;
! >> 21 : num
fibonacci : num -> num;
fibonacci 0       <= 0;
fibonacci 1       <= 1;
fibonacci (n + 2) <= fibonacci n + fibonacci (n + 1);

! >: clasRap [2,4,3,6,3];
! >> [2, 3, 3, 4, 6] : list num
clasRap : list alpha -> list alpha;
clasRap []        <= [];
clasRap (x :: xs) <= clasRap menores <> [x] <> clasRap maiores
                     where menores == comp (xs, \a => a =< x)
                     where maiores == comp (xs, \b => b > x);
